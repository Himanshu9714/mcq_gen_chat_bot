# imporing necessary packages packages from langchain
from langchain.chains import LLMChain
from langchain.chains import SequentialChain
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI

# Initializing the openai GPT-4o model.
llm = ChatOpenAI(
    # LLM model
    model="gpt-4o",
    # Temparature defines the creativity.
    # The higher the number, higher the creativity.
    temperature=0.7,
    # Number of max tokens that the model can accept
    max_tokens=None,
    # Timeout if the response is not generated
    timeout=None,
    # Max no. of retries
    max_retries=2,
)

# The prompt to generate the MCQs based on the provided text.
template = """
Text:{text}
You are an expert MCQ maker. Given the above text, it is your job to \
create a quiz  of {number} multiple choice questions for {subject} students in {tone} tone.
Make sure the questions are not repeated and check all the questions to be conforming the text as well.
Make sure to format your response like  RESPONSE_JSON below  and use it as a guide. \
Ensure to make {number} MCQs.
Make sure that response matches the same structure as I provided below. It must not have any other text apart from the structure, not even `json` to indicate it is a json response. This is because, I will load the response with json.loads in the python, so hope you get it.
### RESPONSE_JSON
{response_json}

"""

# Input variables and creating the template for the user input
quiz_generation_prompt = PromptTemplate(
    input_variables=["text", "number", "subject", "tone", "response_json"],
    template=template,
)

# Create the chain for the user input
# We are storing the output in the quiz variable after the operation
quiz_chain = LLMChain(
    llm=llm, prompt=quiz_generation_prompt, output_key="quiz", verbose=True
)

# Once the quiz is generated by the llm, ask llm to analyze it again and
# chek the grammer, complexity etc.
template2 = """
You are an expert english grammarian and writer. Given a Multiple Choice Quiz for {subject} students.\
You need to evaluate the complexity of the question and give a complete analysis of the quiz. Only use at max 50 words for complexity analysis.
if the quiz is not at per with the cognitive and analytical abilities of the students,\
update the quiz questions which needs to be changed and change the tone such that it perfectly fits the student abilities
Quiz_MCQs:
{quiz}

Check from an expert English Writer of the above quiz:
"""

# Generating prompt template for analyzing the quiz by llm
quiz_evaluation_prompt = PromptTemplate(
    input_variables=["subject", "quiz"], template=template2
)

# Creating the chain for the prompt template
review_chain = LLMChain(
    llm=llm, prompt=quiz_evaluation_prompt, output_key="review", verbose=True
)


# This is an Overall Chain where we run the two chains in Sequence
generate_evaluate_chain = SequentialChain(
    chains=[quiz_chain, review_chain],
    input_variables=["text", "number", "subject", "tone", "response_json"],
    output_variables=["quiz", "review"],
    verbose=True,
)
